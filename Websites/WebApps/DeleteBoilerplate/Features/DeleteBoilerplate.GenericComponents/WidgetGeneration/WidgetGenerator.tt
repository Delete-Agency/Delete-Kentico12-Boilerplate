<#@ template hostspecific="false" debug="true" language="C#" compilerOptions="/langversion:7.3"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ include file="WidgetTemplate.tt" #>

<#+ 
	public static class ReadFile
	{
		public static T LoadJson<T>(string path, string file) where T : class
        {
            string pathFile = string.Concat(path, file);

            using (var stream = new StreamReader(pathFile))
            {
                string json = stream.ReadToEnd();
                T item = JsonConvert.DeserializeObject<T>(json);
                return item;
            }
        }
	}
#>

<#+
	public class WidgetGenerator : Generator
	{
		public string ProjectDirectory { get; set; }
		public WidgetSetting Setting { get; set; }

		public WidgetGenerator()
		{
			this.ProjectDirectory = Context.Host.ResolveAssemblyReference("$(ProjectDir)");
			this.Setting = ReadFile.LoadJson<WidgetSetting>($"{this.ProjectDirectory}WidgetGeneration\\", "WidgetSetting.json");
		}
		
		protected override void RunCore()
		{
			this.MakeWidgetControllerTemplate();

			this.MakeWidgetPropertiesTemplate();
			
			this.MakeWidgetViewModelTemplate();

			this.MakeWidgetMapperTemplate();
			
			this.MakeWidgetViewTemplate();
		}

		protected void MakeWidgetControllerTemplate()
		{
			var controllerTemplate = this.CreateWidgetTemplate<WidgetControllerTemplate>();

			string controllerFileName = $"{this.Setting.Name}WidgetController.cs";
			string controllerPath = $"{this.ProjectDirectory}Controllers\\Widgets\\{controllerFileName}";

			controllerTemplate.RenderToFile(controllerPath);
		}

		protected void MakeWidgetPropertiesTemplate()
		{
			var propertiesTemplate = CreateWidgetTemplate<WidgetPropertiesTemplate>();

			string propertiesFileName = $"{this.Setting.Name}Properties.cs";
			string propertiesPath = $"{this.ProjectDirectory}Models\\Widgets\\{this.Setting.Name}Widget\\{propertiesFileName}";

			propertiesTemplate.RenderToFile(propertiesPath);
		}

		protected void MakeWidgetViewModelTemplate()
		{
			var viewModelTemplate = CreateWidgetTemplate<WidgetViewModelTemplate>();

			string viewModelFileName = $"{this.Setting.Name}WidgetViewModel.cs";
			string viewModelPath =$"{this.ProjectDirectory}Models\\Widgets\\{this.Setting.Name}Widget\\{viewModelFileName}";

			viewModelTemplate.RenderToFile(viewModelPath);
		}

		protected void MakeWidgetMapperTemplate()
		{
			var mapperTemplate = CreateWidgetTemplate<WidgetMapperTemplate>();

			string mapperFileName = $"{this.Setting.Name}Mapper.cs";
			string mapperPath = $"{this.ProjectDirectory}Automap\\{mapperFileName}";

			mapperTemplate.RenderToFile(mapperPath);
		}

		protected void MakeWidgetViewTemplate()
		{
			var viewTemplate = CreateWidgetTemplate<WidgetViewTemplate>();

			string viewName = $"_{this.Setting.Name}.cshtml";
			string viewPath = $"{this.ProjectDirectory}Views\\Shared\\Widgets\\{viewName}";

			viewTemplate.RenderToFile(viewPath);
		}


		protected T CreateWidgetTemplate<T>() where T : BaseTemplate, new()
		{
			T template = new T();
			template.Setting = this.Setting;

			return template;
		}
	}
#>
