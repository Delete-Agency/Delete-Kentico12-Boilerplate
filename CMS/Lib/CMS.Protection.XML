<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Protection</name>
    </assembly>
    <members>
        <member name="T:CMS.Protection.BadWordActionEnum">
            <summary>
            Defines the bad word action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.None">
            <summary>
            No action is performed.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.Remove">
            <summary>
            Removes bad word.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.Replace">
            <summary>
            Replaces bad word with replacement.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.ReportAbuse">
            <summary>
            Reports abuse.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.RequestModeration">
            <summary>
            Requests moderation.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordActionEnum.Deny">
            <summary>
            Denies bad word.
            </summary>
        </member>
        <member name="T:CMS.Protection.BadWordCultureInfo">
            <summary>
            BadWordCultureInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordCultureInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordCultureInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordCultureInfo.WordID">
            <summary>
            Word ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordCultureInfo.CultureID">
            <summary>
            Culture ID.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfo.#ctor">
            <summary>
            Constructor - Creates an empty BadWordCultureInfo object.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new BadWordCultureInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Protection.BadWordCultureInfoProvider">
            <summary>
            Class providing BadWordCultureInfo management.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.GetBadWordCultures">
            <summary>
            Returns a query for all the <see cref="T:CMS.Protection.BadWordCultureInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.GetBadWordCultureInfo(System.Int32,System.Int32)">
            <summary>
            Returns the BadWordCultureInfo structure for the specified BadWordCulture.
            </summary>
            <param name="wordId">Word ID</param>
            <param name="cultureId">Culture ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.SetBadWordCultureInfo(CMS.Protection.BadWordCultureInfo)">
            <summary>
            Sets (updates or inserts) specified BadWordCulture.
            </summary>
            <param name="badWordCulture">BadWordCulture object to set</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.DeleteBadWordCultureInfo(CMS.Protection.BadWordCultureInfo)">
            <summary>
            Deletes specified BadWordCulture.
            </summary>
            <param name="infoObj">BadWordCulture object</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.DeleteBadWordCultureInfo(System.Int32,System.Int32)">
            <summary>
            Deletes specified BadWordCulture.
            </summary>
            <param name="wordId">Word ID</param>
            <param name="cultureId">Culture ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.AddBadWordToCulture(System.Int32,System.Int32)">
            <summary>
            Adds bad word to specified culture and cleares bad word hashtables.
            </summary>
            <param name="wordId">ID of bad word</param>
            <param name="cultureId">ID of culture</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.RemoveBadWordFromCulture(System.Int32,System.Int32)">
            <summary>
            Removes bad word from specified culture and cleares bad word hashtables.
            </summary>
            <param name="wordId">ID of bad word</param>
            <param name="cultureId">ID of culture</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.GetBadWordCultureInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the BadWordCultureInfo object.
            </summary>
            <param name="wordId">Word ID</param>
            <param name="cultureId">Culture ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.SetBadWordCultureInfoInternal(CMS.Protection.BadWordCultureInfo)">
            <summary>
            Sets (updates or inserts) specified BadWordCulture object.
            </summary>
            <param name="badWordCulture">BadWordCulture to set</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.DeleteInfo(CMS.Protection.BadWordCultureInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Protection.BadWordCultureInfoProvider.ClearBadWordProviderHashtables">
            <summary>
            Clears hashtables in bad words provider.
            </summary>
        </member>
        <member name="T:CMS.Protection.BadWordInfo">
            <summary>
            BadWordInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordExpression">
            <summary>
            Word expression.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordAction">
            <summary>
            Word action.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordID">
            <summary>
            Word ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordLastModified">
            <summary>
            Word last modified.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordGUID">
            <summary>
            Word GUID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordReplacement">
            <summary>
            Word replacement.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordIsGlobal">
            <summary>
            Indicates if word is global (all cultures).
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordIsRegularExpression">
            <summary>
            Indicates if word is regular expression.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfo.WordMatchWholeWord">
            <summary>
            Indicates if word should match whole word.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfo.#ctor">
            <summary>
            Constructor - Creates an empty BadWordInfo object.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new BadWordInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Protection.BadWordInfoProvider">
            <summary>
            Class providing BadWordInfo management.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.REMOVE">
            <summary>
            Remove action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.REPLACE">
            <summary>
            Replace action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.REPORT">
            <summary>
            Report abuse action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.MODERATION">
            <summary>
            Moderation action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.DENY">
            <summary>
            Deny action.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.mCultureBadWords">
            <summary>
            Culture specified bad words provider dictionary.
            </summary>
        </member>
        <member name="F:CMS.Protection.BadWordInfoProvider.mGlobalBadWords">
            <summary>
            Global bad words list.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfoProvider.CultureBadWords">
            <summary>
            Culture specified bad words provider dictionary.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordInfoProvider.GlobalBadWords">
            <summary>
            Global bad words list.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CanUseBadWords(CMS.Base.IUserInfo,System.String)">
            <summary>
            Determines whether user can use bad words.
            </summary>
            <param name="user">User info object</param>
            <param name="siteName">Site name</param>
            <returns>True if user can use bad words.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.BadWordExists(System.String)">
            <summary>
            Checks whether bad word exists.
            </summary>
            <param name="badWord">Bad word</param>
            <returns>True if bad word exists.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWords">
            <summary>
            Returns all bad words.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWordInfo(System.Int32)">
            <summary>
            Returns the BadWordInfo structure for the specified badWord.
            </summary>
            <param name="badWordId">Bad word ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWordInfo(System.Guid)">
            <summary>
            Returns the BadWordInfo structure for the specified bad word GUID.
            </summary>
            <param name="wordGuid">Bad word GUID</param>
            <returns>BadWord info object</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.SetBadWordInfo(CMS.Protection.BadWordInfo)">
            <summary>
            Sets (updates or inserts) specified badWord.
            </summary>
            <param name="badWord">BadWord to set</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.DeleteBadWordInfo(CMS.Protection.BadWordInfo)">
            <summary>
            Deletes specified badWord and updates hashtables.
            </summary>
            <param name="infoObj">BadWord object</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.DeleteBadWordInfo(System.Int32)">
            <summary>
            Deletes specified badWord and clears hashtables.
            </summary>
            <param name="wordId">Bad word ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CheckBadWord(CMS.Protection.BadWordInfo,System.String,System.String,System.String@,System.Collections.Hashtable,System.Int32)">
            <summary>
            Checks given text for given bad word.
            </summary>
            <param name="word">BadWordInfo object</param>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Site name</param>
            <param name="text">Text to check</param>
            <param name="foundWords">Found words</param>
            <param name="maxTextLength">Maximum length of the text to be checked. If value is zero, text length is unlimited.</param>
            <returns>What action should be performed and modified text through the text parameter.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CheckAllBadWords(System.String,System.String,CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Hashtable)">
            <summary>
            Checks given text for all bad words.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Site name</param>
            <param name="infoObject">Object info</param>
            <param name="columns">Columns to check (column name and column size). If columns size is zero, column has maximal size and will not checked.</param>
            <param name="foundWords">Found words</param>
            <returns>What action should be performed and modified text through the text parameter.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CheckAllBadWords(System.String,System.String,System.String@,System.Collections.Hashtable)">
            <summary>
            Checks given text for all bad words.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Site name</param>
            <param name="text">Text to check</param>
            <param name="foundWords">Found words</param>
            <returns>What action should be performed and modified text through the text parameter.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CheckAllBadWords(System.String,System.String,System.String@,System.Collections.Hashtable,System.Int32)">
            <summary>
            Checks given text for all bad words.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Site name</param>
            <param name="text">Text to check</param>
            <param name="foundWords">Found words</param>
            <param name="maxTextLength">Maximum length of the text to be checked. If value is zero, text length is unlimited.</param>
            <returns>What action should be performed and modified text through the text parameter.</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWords(System.Int32)">
            <summary>
            Returns all bad words for given culture.
            </summary>
            <param name="cultureId">ID of culture</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.CheckWords(System.String,System.String,System.String@,System.Collections.Hashtable,System.Int32)">
            <summary>
            Check bad words and returns action.
            </summary>
            <param name="cultureCode">Culture code</param>
            <param name="siteName">Site name</param>
            <param name="text">Checked text</param>
            <param name="foundWords">Found words</param>
            <param name="maxTextLength">Maximum length of the text to be checked. If value is zero, text length is unlimited.</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.PerformCheck(CMS.Protection.BadWordInfo,System.String@,System.Collections.Hashtable,System.String,System.Int32)">
            <summary>
            Performes bad word check.
            </summary>
            <param name="badWord">Bad word to check</param>
            <param name="text">Text to check</param>
            <param name="foundWords">Hash table of found words</param>
            <param name="siteName">Name of site</param>
            <param name="maxTextLength">Maximum length of the text to be checked. If value is zero, text length is unlimited.</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.Replace(System.String,System.String,System.String@,System.Int32)">
            <summary>
            Replaces expression with replacement in given text.
            </summary>
            <param name="expression">Expression to be replaced</param>
            <param name="replacement">String replacement</param>
            <param name="text">Text in which the given expression is being searched</param>
            <param name="maxTextLength">Maximum length of the text to be checked. If value is zero, text length is unlimited.</param>
            <returns>ArrayList with found occurrences of expression</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.Find(System.String,System.String)">
            <summary>
            Finds occurrences of string in given text.
            </summary>
            <param name="expression">Expression to find</param>
            <param name="text">Text to search in</param>
            <returns>ArrayList with found occurrences</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.Find(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Finds occurrences of regular expression in given text.
            </summary>
            <param name="regularExpression">Regular expression to find</param>
            <param name="text">Text to search in</param>
            <returns>ArrayList with found occurrences</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.LoadBadWords">
            <summary>
            Loads the values to the hash tables.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.LoadBadWords(System.String)">
            <summary>
            Loads the values to the culture hash table.
            </summary>
            <param name="cultureCode">Code of culture</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWordsInternal(System.Int32)">
            <summary>
            Returns all bad words for given culture.
            </summary>
            <param name="cultureId">ID of culture</param>
            <returns>DataSet with bad words</returns>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.BadWordExistsInternal(System.String)">
            <summary>
            Returns true if bad word exists.
            </summary>
            <param name="badWord">Bad word</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWordInfoInternal(System.Int32)">
            <summary>
            Returns the BadWordInfo structure for the specified badWord.
            </summary>
            <param name="badWordId">BadWord ID</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.GetBadWordInfoByGuidInternal(System.Guid)">
            <summary>
            Returns the BadWordInfo structure for the specified GUID.
            </summary>
            <param name="guid">Bad word GUID</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.SetBadWordInfoInternal(CMS.Protection.BadWordInfo)">
            <summary>
            Sets (updates or inserts) specified BadWord object.
            </summary>
            <param name="badWord">BadWord object to set</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.DeleteInfo(CMS.Protection.BadWordInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Protection.BadWordInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="T:CMS.Protection.BadWordsHelper">
            <summary>
            Helper class for bad words.
            </summary>
        </member>
        <member name="P:CMS.Protection.BadWordsHelper.DefaultReplacement">
            <summary>
            Default replacement for 'replace' action. It is used when replaced string has greater size than maximum limit.
            </summary>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.BadWordsAction(System.String)">
            <summary>
            Gets default action for the bad words from the settings.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.BadWordsReplacement(System.String)">
            <summary>
            Gets default replacement for the bad words from the settings.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.PerformBadWordsCheck(System.String)">
            <summary>
            Indicates if the bad words check should be performed.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.CheckBadWords(CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32,System.Func{System.Boolean})">
            <summary>
            Performs bad words check.
            </summary>
            <param name="obj">GeneralizedInfo info object</param>
            <param name="columns">Columns to check (column name and column size). If columns size is zero, column has maximal size and will not checked.</param>
            <param name="currentUserId">ID of current user</param>
            <param name="validate">Function performing validation of checked object after respective bad words are removed. No further processing is done when validation fails.</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.CheckBadWords(CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32},System.String,System.String,System.Int32,System.Func{System.Boolean})">
            <summary>
            Performs bad words check.
            </summary>
            <param name="obj">GeneralizedInfo info object</param>
            <param name="columns">Columns to check (column name and column size). If columns size is zero, column has maximal size and will not checked.</param>
            <param name="approvalColumn">Approval column name</param>
            <param name="approvalUserColumn">Approval user column name</param>
            <param name="currentUserId">ID of current user</param>
            <param name="validate">Function performing validation of checked object after respective bad words are removed. No further processing is done when validation fails.</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.CheckBadWords(CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32},System.String,System.String,System.String,System.Int32,System.Func{System.Boolean})">
            <summary>
            Performs bad words check.
            </summary>
            <param name="obj">Abstract info object</param>
            <param name="columns">Columns to check (column name and column size). If columns size is zero, column has maximal size and will not checked.</param>
            <param name="approvalColumn">Approval column name</param>
            <param name="approvalUserColumn">Approval user column name</param>
            <param name="reportTitle">Abuse report title</param>
            <param name="currentUserId">ID of current user</param>
            <param name="validate">Function performing validation of checked object after respective bad words are removed. No further processing is done when validation fails.</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.CheckBadWords(CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32},System.String,System.String,System.String,System.String,System.Int32,System.Func{System.Boolean})">
            <summary>
            Performs bad words check.
            </summary>
            <param name="obj">Abstract info object</param>
            <param name="columns">Columns to check (column name and column size). If columns size is zero, column has maximal size and will not checked.</param>
            <param name="approvalColumn">Approval column name</param>
            <param name="approvalUserColumn">Approval user column name</param>
            <param name="reportTitle">Abuse report title</param>
            <param name="reportURL">Abuse report URL</param>
            <param name="currentUserId">ID of current user</param>
            <param name="validate">Function performing validation of checked object after respective bad words are removed. No further processing is done when validation fails.</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.GetOptimizedUrl(System.String)">
            <summary>
            Gets URL of reported abuse and performs optimizations.
            </summary>
            <param name="objectType">Type of reported object</param>
            <returns>Optimized URL</returns>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.GetReportComment(CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Gets report comment.
            </summary>
            <param name="obj">Abstract info object</param>
            <param name="columns">Dictionary of columns (column name and size).</param>
        </member>
        <member name="M:CMS.Protection.BadWordsHelper.GenerateWordList(System.Collections.Hashtable,CMS.Protection.BadWordActionEnum)">
            <summary>
            Generates bad words list.
            </summary>
            <param name="foundWords">Hashtable with found words</param>
            <param name="action">Performed action</param>
            <returns>Comma-separated list of found words</returns>
        </member>
        <member name="T:CMS.Protection.BanControlEnum">
            <summary>
            Banned IP control enumeration
            Order 1,2,4,8,... is important because of bitwise operation
            </summary>
        </member>
        <member name="F:CMS.Protection.BanControlEnum.Complete">
            <summary>
            Check user IP on Session start, If IP is banned redirect to the information page.
            </summary>
        </member>
        <member name="F:CMS.Protection.BanControlEnum.Login">
            <summary>
            Check user IP during login.
            </summary>
        </member>
        <member name="F:CMS.Protection.BanControlEnum.Registration">
            <summary>
            Check user IP during registration.
            </summary>
        </member>
        <member name="F:CMS.Protection.BanControlEnum.AllNonComplete">
            <summary>
            (Default) Check user IP during login, registration and input user actions (comments, ratings, ...).
            </summary>
        </member>
        <member name="T:CMS.Protection.BannedIPInfo">
            <summary>
            BannedIPInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Protection.BannedIPInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Protection.BannedIPInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressID">
            <summary>
            IP address ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressSiteID">
            <summary>
            IP address site ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressAllowed">
            <summary>
            Indicated whether IP address is allowed.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressBanType">
            <summary>
            Ban type of IP address.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressAllowOverride">
            <summary>
            Indicates whether ban can be overridden.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressBanEnabled">
            <summary>
            Indicates whether ban is enabled.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddress">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressRegular">
            <summary>
            IP Address regular expression.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressBanReason">
            <summary>
            Reason of ban.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressGUID">
            <summary>
            IP Address GUID.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfo.IPAddressLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfo.#ctor">
            <summary>
            Constructor - Creates an empty BannedIPInfo object.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new BannedIPInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Protection.BannedIPInfoProvider">
            <summary>
            Class providing BannedIPInfo management.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfoProvider.GlobalBannedIPs">
            <summary>
            Stores global banned IPs and if it is allowed.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfoProvider.SitesBannedIPs">
            <summary>
            Stores site related banned IPs and if it is allowed.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfoProvider.CachedBannedIPs">
            <summary>
            Contains denied IP address which accessed site from last change in banned IP info objects.
            Increases performance when attacker is spamming.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfoProvider.LastChange">
            <summary>
            Returns time of the last change in banned IP settings.
            </summary>
        </member>
        <member name="P:CMS.Protection.BannedIPInfoProvider.LastChangeInternal">
            <summary>
            Returns time of the last change in banned IP settings.
            </summary>
        </member>
        <member name="F:CMS.Protection.BannedIPInfoProvider.ALLOWED">
            <summary>
            Bool indicating that IP was allowed.
            </summary>
        </member>
        <member name="F:CMS.Protection.BannedIPInfoProvider.DENIED">
            <summary>
            Bool indicating that IP was denied.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetBannedIPInfo(System.Int32)">
            <summary>
            Returns the BannedIPInfo structure for the specified bannedIP.
            </summary>
            <param name="bannedIPId">BannedIP id</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.SetBannedIPInfo(CMS.Protection.BannedIPInfo)">
            <summary>
            Sets (updates or inserts) specified bannedIP.
            </summary>
            <param name="bannedIP">BannedIP to set</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.DeleteBannedIPInfo(CMS.Protection.BannedIPInfo)">
            <summary>
            Deletes specified bannedIP.
            </summary>
            <param name="infoObj">BannedIP object</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.DeleteBannedIPInfo(System.Int32)">
            <summary>
            Deletes specified bannedIP.
            </summary>
            <param name="bannedIPId">BannedIP id</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetBannedIPs">
            <summary>
            Returns the query for all banned IPs.
            </summary>   
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.IsAllowed(System.String,CMS.Protection.BanControlEnum)">
            <summary>
            Returns true if client IP address (from HttpContext) is allowed to access the site, false if it is banned.
            </summary>
            <param name="siteName">Ban settings of this site will be used</param>   
            <param name="banType">Which ban type should be checked</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.IsAllowed(System.String,System.String,CMS.Protection.BanControlEnum)">
            <summary>
            Returns true if client IP address is allowed to access the site, false if it is banned.
            </summary>
            <param name="ipAddress">Check this ip address</param>
            <param name="siteName">Ban settings of this site will be used</param>        
            <param name="banType">Which ban type should be checked</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.CheckIPandRedirect(System.String,CMS.Protection.BanControlEnum)">
            <summary>
            Check if IP address id allowed and if not redirects to the page specified in App settings, key CMSBannedIPRedirectURL.
            </summary>
            <param name="siteName">Ban settings of this site will be used</param>
            <param name="banType">Which ban type should be checked</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.CheckBannedIP">
            <summary>
            Checks the current IP for being banned for web access
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.BanRedirect(System.String)">
            <summary>
            Redirects current http response to special page for banned IPs (settings key CMSBannedIPRedirectURL).
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.IsBannedIPEnabled(System.String)">
            <summary>
            Returns true if BannedIP module is enabled for specified site (Settings key).
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.LoadCachedIPs">
            <summary>
            Load all banned ip from DB to Hash tables if not yet loaded.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.ReloadCachedIPs(System.Boolean)">
            <summary>
            Reload all banned ip from DB to Hash tables.
            </summary>
            <param name="logWebFarm">Enables or disables webfarm task logging, if false no task is logged</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetInfoById(System.Int32,System.Boolean)">
            <summary>
            Gets the info by its ID.
            </summary>
            <param name="id">ID of the object</param>
            <param name="useHashtable">If true, the get operation uses hashtable</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.SetInfo(CMS.Protection.BannedIPInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.DeleteInfo(CMS.Protection.BannedIPInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.IsBannedIPEnabledInternal(System.String)">
            <summary>
            Returns true if BannedIP module is enabled for specified site (Settings key).
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetBannedIPsInternal">
            <summary>
            Returns the query for all banned IPs.
            </summary>   
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.IsAllowedInternal(System.String,System.String,CMS.Protection.BanControlEnum)">
            <summary>
            Returns true if client IP address is allowed to access the site, false if it is banned.
            </summary>
            <param name="ipAddress">Check this IP address</param>
            <param name="siteName">Ban settings of this site will be used</param>        
            <param name="banType">Which ban type should be checked</param>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetRegularIPAddress(System.String)">
            <summary>
            Returns regular expression corresponding to ip address.
            </summary>
            <param name="ipAddress">Ip address with special marks</param>        
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.GetMatchingBannedIpInfo(System.Collections.Generic.IEnumerable{CMS.Protection.BannedIPInfo},System.String,System.Int32)">
            <summary>
            Gets BannedIPInfo from the given list that best match the given address a ban type mask.
            </summary>
        </member>
        <member name="M:CMS.Protection.BannedIPInfoProvider.CompareIpAddressSpecificity(CMS.Protection.BannedIPInfo,CMS.Protection.BannedIPInfo)">
            <summary>
            Returns positive value if the first info is more specific than the second. Negative value means the second info is more specific. Zero means equal specificity.
            </summary>
        </member>
        <member name="T:CMS.Protection.ProtectionModuleMetadata">
            <summary>
            Represents the Protection module metadata.
            </summary>
        </member>
        <member name="M:CMS.Protection.ProtectionModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Protection.AbuseReportInfo">
            <summary>
            AbuseReportInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportUserID">
            <summary>
            Report User ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportWhen">
            <summary>
            Report When.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportGUID">
            <summary>
            Report GUID.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportStatus">
            <summary>
            Report Status.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportTitle">
            <summary>
            Report Title.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportObjectType">
            <summary>
            Report Object Type.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportCulture">
            <summary>
            Report Culture.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportComment">
            <summary>
            Report Comment.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportURL">
            <summary>
            Report URL.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportSiteID">
            <summary>
            Report Site ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportID">
            <summary>
            Report ID.
            </summary>
        </member>
        <member name="P:CMS.Protection.AbuseReportInfo.ReportObjectID">
            <summary>
            Report Object ID.
            </summary>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfo.#ctor">
            <summary>
            Constructor - Creates an empty AbuseReportInfo object.
            </summary>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AbuseReportInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Protection.AbuseReportInfoProvider">
            <summary>
            Class providing AbuseReportInfo management.
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportInfoProvider.SUPPORTED_OBJECT_TYPES">
            <summary>
            Object types which are supported to be displayed in details.
            </summary>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.GetAbuseReportInfo(System.Int32)">
            <summary>
            Returns the AbuseReportInfo structure for the specified abuseReport.
            </summary>
            <param name="abuseReportId">AbuseReport id</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.SetAbuseReportInfo(CMS.Protection.AbuseReportInfo)">
            <summary>
            Sets (updates or inserts) specified abuseReport.
            </summary>
            <param name="abuseReport">AbuseReport to set</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.DeleteAbuseReportInfo(CMS.Protection.AbuseReportInfo)">
            <summary>
            Deletes specified abuseReport.
            </summary>
            <param name="infoObj">AbuseReport object</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.DeleteAbuseReportInfo(System.Int32)">
            <summary>
            Deletes specified abuseReport.
            </summary>
            <param name="abuseReportId">AbuseReport id</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.GetAbuseReports(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns Dataset with AbuseReportInfo.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Restricts maximum number of rows, for all rows use 0</param>
            <param name="columns">Select only specified columns</param>
        </member>
        <member name="M:CMS.Protection.AbuseReportInfoProvider.IsObjectTypeSupported(System.String)">
            <summary>
            Indicates if given obejct type is supproted to show details.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.Protection.AbuseReportStatusEnum">
            <summary>
            Abuse report status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportStatusEnum.New">
            <summary>
            New abuse report.
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportStatusEnum.Solved">
            <summary>
            Solved abuse report.
            </summary>
        </member>
        <member name="F:CMS.Protection.AbuseReportStatusEnum.Rejected">
            <summary>
            Rejected abuse report.
            </summary>
        </member>
        <member name="T:CMS.Protection.ProtectionModule">
            <summary>
            Represents the Protection module.
            </summary>
        </member>
        <member name="M:CMS.Protection.ProtectionModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Membership.FloodProtectionHelper">
            <summary>
            Flood protection class.
            </summary>
        </member>
        <member name="P:CMS.Membership.FloodProtectionHelper.MaxPoolCapacity">
            <summary>
            Maximum pool capacity
            </summary>
        </member>
        <member name="P:CMS.Membership.FloodProtectionHelper.UserBasedProtection">
            <summary>
            Gets or sets the value that indictaes whether for authenticated user is action's
            flood interval checked with dependence on current user or IP address
            </summary>
        </member>
        <member name="M:CMS.Membership.FloodProtectionHelper.CheckFlooding(System.String,CMS.Base.IUserInfo)">
            <summary>
            Returns true if the current IP address or user floods the system.
            </summary>
            <param name="sitename">Site name</param> 
            <param name="ui">User info object</param>
        </member>
    </members>
</doc>
